from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

API_TOKEN = ""
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


start_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
start_button = KeyboardButton("–ù–∞—á–∞—Ç—å")
start_kb.add(start_button)

kb = ReplyKeyboardMarkup(resize_keyboard=True)
button = KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
button2 = KeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
kb.row(button, button2)

in_kb = InlineKeyboardMarkup(resize_keyboard=True)
in_button = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data="calories")
in_button1 = InlineKeyboardButton(text="–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞", callback_data="formulas")
in_kb.add(in_button, in_button1)


class UserStats(StatesGroup):
    age = State()
    growth = State()
    weight = State()


@dp.message_handler(text=["–ù–∞—á–∞—Ç—å"])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã \n"
        "–Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é. ü¶†üë©‚Äç‚öïüß¨ü©∫üíâ  \n",
        reply_markup=kb
    )


@dp.message_handler(text=["–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"])
async def main_menu(message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:' \n",
        reply_markup=in_kb
    )


@dp.callback_query_handler(text="formulas")
async def formulas(call):
    await call.message.answer(
        "–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞:\n"
        "1. –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π = (10 * –≤–µ—Å) + (6.25 * —Ä–æ—Å—Ç) - (5 * –≤–æ–∑—Ä–∞—Å—Ç) + 5\n"
        "2. –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ = –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π * 1.25\n"
    )


@dp.callback_query_handler(text="calories")
async def set_age(call):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ")
    await UserStats.age.set()


@dp.message_handler(state=UserStats.age)
async def set_growth(message, state):
    await state.update_data(age=int(message.text))
    await state.get_data()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç: ")
    await UserStats.growth.set()


@dp.message_handler(state=UserStats.growth)
async def set_weight(message, state):
    await state.update_data(growth=int(message.text))
    await state.get_data()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å: ")
    await UserStats.weight.set()


@dp.message_handler(state=UserStats.weight)
async def send_calories(message, state):
    await state.update_data(weight=int(message.text))
    data = await state.get_data()
    calories = (10 * data["weight"]) + (6.25 * data["growth"]) - (5 * data["age"]) + 5
    await message.answer(f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories}")
    await state.finish()


@dp.message_handler(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(message):
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n- –ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ.")


@dp.message_handler()
async def helper(message: types.Message):
    await message.answer("üëã", reply_markup=start_kb)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
